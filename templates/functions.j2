#jinja2: lstrip_blocks: True
# {{ ansible_managed }}

_backup_profile_dir={{_backup_profile_dir}}
_backup_lib_dir={{_backup_lib_dir}}
_backup_exclude_dir={{_backup_exclude_dir}}
_backup_secret_dir={{_backup_secret_dir}}

if [ -z "$NUMBAK" ]; then
    NUMBAK={{_backup_maxnum}}
fi

if [ -z "$NEWSTAMP" ]; then
    NEWSTAMP=`date '+%Y-%m-%d.%H:%M:%S'`
fi

# Load the global configuration
loadConfig(){
    if [ -f "$_backup_lib_dir/config" ]; then
        . $_backup_lib_dir/config
    fi

    if [ `id -u` -ne 0 ]; then
        if [ -f "$HOME/.config/backup/config" ]; then
            . $HOME/.config/backup/config
        fi
    fi
}

# Load profile specific settings. Not required if the global configuration
# contains all relevant information for simple setups.
loadProfile(){
    _profile=$1

    if [ `id -u` -ne 0 ]; then
        if [ -f "$_backup_profile_dir/$_profile" ]; then
            . "$_backup_profile_dir/$_profile"
        elif [ -f "$HOME/.config/backup/$_profile" ]; then
            . "$HOME/.config/backup/$_profile"
        else
            echo "Profile $_profile not found";
            exit 1
        fi

        if [ -f "$HOME/.config/backup/secrets/$_profile.secrets" ]; then
            . "$HOME/.config/backup/secrets/$_profile.secrets"
        fi
    else
        if [ -f "$_backup_profile_dir/$_profile" ]; then
            . "$_backup_profile_dir/$_profile"
        else
            echo "Profile $_profile not found";
            exit 1
        fi

        if [ -f "$_backup_secret_dir/$_profile.secrets" ]; then
            . "$_backup_secret_dir/$_profile.secrets"
        fi
    fi

    if [ -z "$PROFILE_NAME" ]; then
        PROFILE_NAME=$_profile
    fi

    if [ -n "$LOG_ARCHIVE_PATTERN" ]; then
        _year=`date +%Y`
        _month=`date +%m`
        _day=`date +%d`
        _backup_log_archive_file=${LOG_ARCHIVE_PATTERN/\%Y/$_year}
        _backup_log_archive_file=${_backup_log_archive_file/\%m/$_month}
        _backup_log_archive_file=${_backup_log_archive_file/\%d/$_day}
        _backup_log_archive_file=${_backup_log_archive_file/\%profile/$_profile}
        _backup_log_archive_dir=`dirname $_backup_log_archive_file`
    fi

}

# this should be called after all configuration options, including custom
# script overrides, were processed. Even when not using profiles this should
# be called to validate the global profile.
validateProfile(){
    if [ -z "$TARGET" ]; then
        echo "Backup target (TARGET) not set"
        exit 1
    fi

    if [ -z "$BACKUP_TYPE" ]; then
        BACKUP_TYPE=rsync
    fi

    if [ -z "$BACKUP_SOURCE" ]; then
        if [ -n "$SOURCE_PATH" ]; then
            echo "Using source path as backup source: $SOURCE_PATH"
            BACKUP_SOURCE=$SOURCE_PATH
        else
            echo "No backup source specified for profile $PROFILE_NAME"
            exit 1
        fi
    fi

    if [ -n "$SOURCE_PATH" ]; then
        SOURCE_PATH=$BACKUP_SOURCE
    fi
}

doMount(){
    if [ -z "$MNT_SRC" ] || [ -z "$MNT_PATH" ]; then
        echo "No mount source or path"
        return 1
    fi
    _options=

    if [ -n "$MNT_OPTS" ]; then
        _options="$_options -o $MNT_OPTS"
    fi

    if [ -n "$MNT_FSTYPE" ]; then
        _options="$_options -t $MNT_FSTYPE"
    fi

    _cmd="mount $_options $MNT_SRC $MNT_PATH"
    `$_cmd`
    return $?
}

doUnmount(){
    if [ -z "$MNT_PATH" ]; then
        echo "No mount path"
        return 1
    fi

    umount -l $MNT_PATH
}

doRotate(){
    SOURCE=`echo $1|sed 's,^/,,'`
    if [ -z "$SOURCE" ]; then echo "doRotate() without SOURCE"; return; fi
    DRYRUN=$2
    if [ -n "$DRYRUN" ]; then echo "doRotate() dryrun"; fi
    if [ ! -L $TARGET/$SOURCE.current ]; then
        echo "No backup available, not rotating"
        return
    fi
    LATEST=`readlink $TARGET/$SOURCE.current`
    if [ -z "$DRYRUN" ]; then
        cp -al $LATEST $TARGET/$SOURCE.$NEWSTAMP
    fi
    NUMDIRS=`ls -1rd --time=ctime $TARGET/$SOURCE.[0-9]*|wc -l`
    if [ -n "$DRYRUN" ]; then
        echo "Current directories: "
        echo "ls -1d --time=ctime -lth $TARGET/$SOURCE.[0-9]*"
        ls -1d --time=ctime -lth $TARGET/$SOURCE.[0-9]*
        # for dry runs we need to add one, as the new directory is not created
        NUMDIRS=$((NUMDIRS+1))
    fi
    if [ $NUMBAK -lt 1 ]; then
        echo "Expiration is disabled for this profile"
    else
        if [ $NUMDIRS -gt $NUMBAK ]; then
            DELETE=$((NUMDIRS-NUMBAK))
            echo "Have $NUMDIRS instead of $NUMBAK, deleting $DELETE"
            if [ -z "$DELETE" ]; then
                echo "Empty delete result, skipping deletions."
            else
                for i in `ls -1d --time=ctime $TARGET/$SOURCE.[0-9]*|tail -$DELETE`; do
                    echo "Deleting $i"
                    if [ -z "$DRYRUN" ]; then
                        rm -Rf $i
                    else
                        echo "ls -1d --time=ctime $TARGET/$SOURCE.[0-9]*|tail -$DELETE"
                    fi
                done
            fi
        fi
    fi
}

doBackup(){
    SOURCE=$1
    if [ ! -z "$2" ]; then
        SHORTDEST=`echo $2|sed 's,^/,,'`
    else
        SHORTDEST=`echo $SOURCE|sed 's,^/,,'`
    fi

    if [ -z "$SOURCE" ]; then echo "doBackup() without SOURCE"; return; fi

    if [ "$BACKUP_TYPE" = "rsync" ]; then
        doRsyncBackup "$SOURCE" "$SHORTDEST"
    elif [ "$BACKUP_TYPE" = "restic" ]; then
        doResticBackup "$SOURCE" "$SHORTDEST"
    else
        echo "Unsupported backup type: $BACKUP_TYPE"
    fi
}

doResticBackup(){
    SOURCE=$1
    SHORTDEST=$2

    # TODO
    # easiest is just to chdir to wherever we want to make the backup,
    # but in some cases we might want to have more control over the snapshot names
    cd $SOURCE
    if [ -z "$EXCLUDE_FILE" ]; then
        restic backup --json --exclude-caches . | jq '. | select(.message_type == "summary" )'
    else
        if [[ "$EXCLUDE_FILE" != /* ]]; then
            if [ -f "$_backup_exclude_dir/$EXCLUDE_FILE" ]; then
                EXCLUDE_FILE="$_backup_exclude_dir/$EXCLUDE_FILE"
                echo "Using $EXCLUDE_FILE"
            elif [ -f "$HOME/.config/backup/config/$EXCLUDE_FILE" ]; then
                EXCLUDE_FILE="$HOME/.config/backup/config/$EXCLUDE_FILE"
                echo "Using $EXCLUDE_FILE"
            fi
        fi

        if [ ! -f "$EXCLUDE_FILE" ]; then
            echo "Exclude file specified, but not present: $EXCLUDE_FILE"
            exit 1
        fi
        restic backup --json --exclude-caches --exclude-file "$EXCLUDE_FILE" . | jq '. | select(.message_type == "summary" )'
    fi
}

doRsyncBackup(){
    SOURCE=$1
    SHORTDEST=$2
    DEST=$SHORTDEST.$NEWSTAMP
    if [ -z "$EXCLUDE_FILE" ]; then
        rsync -aHx -vv --progress --stats --numeric-ids --delete --delete-excluded $RSYNC_OPTS $SOURCE/./ $TARGET/$DEST
    else
        if [[ "$EXCLUDE_FILE" != /* ]]; then
            if [ -f "$_backup_exclude_dir/$EXCLUDE_FILE" ]; then
                EXCLUDE_FILE="$_backup_exclude_dir/$EXCLUDE_FILE"
                echo "Using $EXCLUDE_FILE"
            elif [ -f "$HOME/.config/backup/config/$EXCLUDE_FILE" ]; then
                EXCLUDE_FILE="$HOME/.config/backup/config/$EXCLUDE_FILE"
                echo "Using $EXCLUDE_FILE"
            fi
        fi

        if [ ! -f "$EXCLUDE_FILE" ]; then
            echo "Exclude file specified, but not present: $EXCLUDE_FILE"
            exit 1
        fi

        rsync -aHx --progress --numeric-ids --exclude-from "$EXCLUDE_FILE" --delete --delete-excluded $RSYNC_OPTS $SOURCE/./ $TARGET/$DEST
    fi
    ln -sfT $TARGET/$DEST $TARGET/$SHORTDEST.current
}

doCleanup(){
    echo "Cleaning up after $PROFILE_NAME"
    if [ -n "$SOURCE_SRC" ]; then
        MNT_PATH=$SOURCE_PATH doUnmount
    fi
}

doSaveLog(){
    if [ -n "$_backup_log_archive_file" ] &&
           [ -n "$_backup_log_archive_dir" ]; then
        echo "Creating $_backup_log_archive_dir"
        mkdir -p "$_backup_log_archive_dir"
        echo "Storing $_backup_log_archive_file"
        journalctl -u backup@$_profile.service --since today > "$_backup_log_archive_file" 2>&1
    fi
}
